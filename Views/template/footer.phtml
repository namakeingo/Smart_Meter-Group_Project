</div>
</div>
</div>
<!-- /#page-content-wrapper -->


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script src="js/jquery-migrate-3.0.1.min.js"></script>
<script src="js/jquery.easing.1.3.js"></script>
<script src="js/jquery.stellar.min.js"></script>
<script src="js/aos.js"></script>
<script src="js/scrollax.min.js"></script>
<script src="js/main.js"></script>

<script>
    $("#menu-toggle").click(function(e) {
        e.preventDefault();
        $("#wrapper").toggleClass("toggled");
    });
</script>

<!--<script>-->
<!--    //script that assure that all charts are loaded with the window width-->
<!--    function activeElement() {-->
<!--        document.getElementById("emptySpaceTab").className = "tab-pane";-->
<!--        document.getElementById("weekTab").className = "tab-pane";-->
<!--        document.getElementById("monthTab").className = "tab-pane";-->
<!--        document.getElementById("yearTab").className = "tab-pane";-->
<!--    }-->
<!--    setTimeout(activeElement, 1000);-->
<!--</script>-->
<script>
    $( document ).ready(function() {
        $( "#doughnut" ).click(function() {
            setTimeout(
                function() {
                    chartContainerElec('chartContainer','Electricity',<?php echo $view->totalElec ?>,<?php echo $view->elecBudget ?>)
                },
                50);
            setTimeout(
                function() {
                    chartContainerGas('chartContainer2','Gas',<?php echo $view->totalGas ?>,<?php echo $view->gasBudget ?>)
                },
                50);
        });

    });

    function chartContainerElec ( target,type,Cost,setBadget) {
        var remainingBudget = setBadget-Cost;
        var remainingBudgetText = 'Remaining Budget';
        if(setBadget-Cost < 0){
            remainingBudgetText = 'Overspent Budget!!'
        }
        CanvasJS.addColorSet("set",
            [//colorSet Array
                <?php echo "\"" . $colour[0] . "\""; ?>
                ,"lightgrey"
            ]);
        var chart = new CanvasJS.Chart(target,
            {
                colorSet: "set",

                exportEnabled: true,
                animationEnabled: true,
                title:{
                    text: type+" Monthly Cost "
                },
                legend:{
                    cursor: "pointer",
                    itemclick: explodePie,
                    verticalAlign: "bottom",  // "center" , "top"
                    fontSize: 17,
                },
                data: [{
                    type: "doughnut",
                    indexLabelFontSize: 17,
                    showInLegend: true,
                    toolTipContent: "{name}: <strong>£{y}</strong>",
                    indexLabel: "{name} - £{y}",
                    dataPoints: [
                        { y: Cost, name: "Current " +type +" Cost", exploded: true },
                        { y: remainingBudget, name: remainingBudgetText},

                    ]
                }]
            });
        chart.render();

    };

    function chartContainerGas ( target,type,Cost,setBadget) {
        var remainingBudget = setBadget-Cost;
        var remainingBudgetText = 'Remaining Budget';
        if(setBadget-Cost < 0){
            remainingBudgetText = 'Overspent Budget!!'
        }
        CanvasJS.addColorSet("set",
            [//colorSet Array
                <?php echo "\"" . $colour[1] . "\""; ?>
                ,"lightgrey"
            ]);
        var chart = new CanvasJS.Chart(target,
            {
                colorSet: "set",

                exportEnabled: true,
                animationEnabled: true,
                title:{
                    text: type+" Monthly Cost "
                },
                legend:{
                    cursor: "pointer",
                    itemclick: explodePie,
                    verticalAlign: "bottom",  // "center" , "top"
                    fontSize: 17,
                },
                data: [{
                    type: "doughnut",
                    showInLegend: true,
                    indexLabelFontSize: 17,
                    toolTipContent: "{name}: <strong>£{y}</strong>",
                    indexLabel: "{name} - £{y}",
                    dataPoints: [
                        { y: Cost, name: "Current " +type +" Cost", exploded: true },
                        { y: remainingBudget, name: remainingBudgetText},
                    ]
                }]
            });
        chart.render();

    };

    function explodePie (e) {
        if(typeof (e.dataSeries.dataPoints[e.dataPointIndex].exploded) === "undefined" || !e.dataSeries.dataPoints[e.dataPointIndex].exploded) {
            e.dataSeries.dataPoints[e.dataPointIndex].exploded = true;
        } else {
            e.dataSeries.dataPoints[e.dataPointIndex].exploded = false;
        }
        e.chart.render();

    }
</script>
<!--<script>
    window.onload = function{setStyle('energy1',<?php echo $view->totalElec; ?>// ,20)};
    window.onload = function{setStyle('gas1',<?php echo $view->totalGas; ?> ,20)};

    function setStyle(ID, value, budget){
        var color;
        var budgetMed= budget/4*3;
        if (value < budgetMed) {
            color = " color-yellow";
        }
        else if (value < budget) {
            color = " color-orange";
        }
        else if (value >= budget) {
            color = " color-red";
        }
        var elements = document.getElementsByClassName(ID);
        elements[0].className = "fa-stack fa-2x "+color;
        elements[1].className = "overlay-to-circle "+color;
        elements[2].className = "in-circle "+color;
    }
</script>-->

<!--speed-->
<script src="http://bernii.github.io/gauge.js/dist/gauge.min.js"></script>
<script>
    //// start of http Getters
    // pure jQuery - http GET request to let JS talk to php Models
    // (used in InstantConsumption, ChartElectricity, ChartGas, ChartComparison
    // httpGetInstant is specific to InstantConsumption
    function httpGetInstant(type, multiplyInstant, delay){
        var data= {type: type, delay:delay};
        return parseFloat(httpGet(data)) * multiplyInstant;
    }
    // httpGetChart is used by ChartGas, ChartElectricity, ChartComparison
    function httpGetChart(type, period, dateFrom, dateTo, timeFormat, dateToJoinModifier, compareFrom, compareTo){
        var data= {
            type: type,
            period: period,
            dateFrom: dateFrom,
            dateTo: dateTo,
            timeFormat: timeFormat,
            dateToJoinModifier: dateToJoinModifier,
            compareFrom: compareFrom,
            compareTo: compareTo
        };
        return httpGet(data, true);
    }
    // httpGetPrediction is used in the index by PredictionCharts
    function httpGetPrediction(unit) {
        var data= {unit:unit};
        return httpGet(data, true, true);
    }
    // httpGet speaks to /Models/Request.php to get the required data from php Models
    function httpGet(data, isJson, toCache){
        var response;
        var url='/Models/Request.php';
        var dataType='';
        if (isJson){
            dataType= 'json';
        }
        var cache=false;
        if (toCache){
            cache=true;
        }
        $.ajax({
            async: false,
            type: "GET",
            url: url,
            data: data,
            dataType,
            cache,
            success: function (data) {
                //console.log(data);
                response = data;
                //console.log(response);
            }
        });
        return response;
    }
    //// end of httpGetters

    //Instantaneous consumption Gas and Electricity with continuous update
    $( document ).ready(function() {
        $( "#instant" ).click(function() {
            setTimeout(
                function() {
                    //ELEC
                    var target1 = document.getElementById('speedElec'); // your canvas element
                    var gauge1 = new Gauge(target1).setOptions(opts); // create sexy gauge!
                    gauge1.maxValue = 2780; // set max gauge value
                    gauge1.setMinValue(0);  // Prefer setter over gauge.minValue = 0
                    gauge1.animationSpeed = 22; // set animation speed (32 is default value)
                    gauge1.set(0);
                    var execElec=0;
                    var valueElec;
                    function setElec(){
                        //limit number of executions to avoid delays
                        if (execElec===0) {
                            //request updated value to API
                            //console.log(httpGet('/Models/Request.php', 'ELEC') * 100000;);
                            valueElec = httpGetInstant('ELEC',100000,'-2minutes -30seconds');
                            //console.log(valueElec);
                        }
                        execElec++;
                        if (execElec > 20){
                            execElec=0;
                        }
                        if (valueElec!==0){
                            var value=valueElec+Math.floor(Math.random() * 10)-10;
                        }
                        else {
                            var value = valueElec;
                        }
                        $('#preview-Electricity').html((parseFloat(value)/100000).toFixed(5)+' kWh');
                        gauge1.set(value); // set actual value
                        $('#elecIconSpeed').css('color',gauge1.getColorForValue(value, true));
                    }
                    setElec();
                    setInterval(function(){
                        setElec();
                    }, Math.floor(Math.random() * 2000)+1000);

                    //GAS
                    var target2 = document.getElementById('speedGas'); // your canvas element
                    var gauge2= new Gauge(target2).setOptions(opts); // create sexy gauge!
                    gauge2.maxValue = 2240; // set max gauge value
                    gauge2.setMinValue(0);  // Prefer setter over gauge.minValue = 0
                    gauge2.animationSpeed = 22; // set animation speed (32 is default value)
                    gauge2.set(0);
                    var execGas=0;
                    var valueGas;
                    function setGas(){
                        //limit number of executions to avoid delays
                        if (execGas===0) {
                            //request updated value to API
                            valueGas = httpGetInstant('GAS',100000,'-5minutes');
                            //console.log(valueGas);
                        }
                        execGas++;
                        if (execGas > 20){
                            execGas=0;
                        }
                        if (valueGas!==0){
                            var value=valueGas+Math.floor(Math.random() * 10)-10; // set actual value
                        }
                        else{
                            var value=valueGas;
                        }
                        $('#preview-Gas').html((parseFloat(value)/100000).toFixed(5)+' kWh');;
                        gauge2.set(value); // set actual value
                        $('#gasIconSpeed').css('color',gauge2.getColorForValue(value, true));
                    }
                    setGas();
                    setInterval(function(){
                        setGas();
                    }, Math.floor(Math.random() * 2000)+1000);
                },
                50);
        });

    });
</script>
<script>
    // var for styling Instantaneous Consumption
    var opts = {
        angle: -0.33, // The span of the gauge arc
        lineWidth: 0.3, // The line thickness
        radiusScale: 1, // Relative radius
        pointer: {
            length: 0.55, // // Relative to gauge radius
            strokeWidth: 0.031, // The thickness
            color: '#575757' // Fill color
        },
        limitMax: false,     // If false, max value increases automatically if value > maxValue
        limitMin: true,     // If true, the min value of the gauge will be fixed
        percentColors: [[0.0, "#808080" ],[0.0001, "#177e11" ], [0.60, "#f9c802"], [1.0, "#ff0000"]],
        strokeColor: '#E0E0E0',
        generateGradient: true,
        highDpiSupport: true,     // High resolution support
    };
</script>

<!--Inverted -->
<script type="text/javascript">
    //method to invert colors for color blind accessibility
    function invertColor() {
        // the css we are going to inject
        var css = 'html {-webkit-filter: invert(100%);' +
            '-moz-filter: invert(100%);' +
            '-o-filter: invert(100%);' +
            '-ms-filter: invert(100%); }';

        var head = $('head')[0];
        var invertStyle = $('#invert')[0];

        if (invertStyle) {
            head.removeChild(invertStyle);
        } else {
            var style = document.createElement('style');

            style.type = 'text/css';
            style.id = 'invert';
            if (style.styleSheet){
                style.styleSheet.cssText = css;
            } else {
                style.appendChild(document.createTextNode(css));
            }

            //injecting the css to the head
            head.appendChild(style);
        }
    }
</script>

</body>
</html>
